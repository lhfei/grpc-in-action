/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.2.1/userguide/java_library_plugin.html
 */

plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.12'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

// properties
def grpcVersion = '1.30.2'
def protobufVersion = '3.13.0'
def protocVersion = protobufVersion
def slf4jVersion = '1.7.30'
def logbackVersion = '1.2.3'
def commonMath3Version = '3.6.1'
def guavaVersion = '28.2-jre'
def gsonVersion = '2.8.6'

dependencies {
    // gRPC
	compile group: 'io.grpc', name: 'grpc-protobuf', version: "${grpcVersion}"
	compile group: 'io.grpc', name: 'grpc-netty', version: "${grpcVersion}"
	compile group: 'io.grpc', name: 'grpc-stub', version: "${grpcVersion}"

    // Google Gson
    compile group: "com.google.code.gson", name: "gson", version: "${gsonVersion}"
	
	// Slf4j dependencies
	compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
//	compile group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
	compile group: 'org.slf4j', name: 'slf4j-log4j12', version: "${slf4jVersion}"
	
	compile group: 'ch.qos.logback', name: 'logback-classic', version: "${logbackVersion}"
	compile group: 'ch.qos.logback', name: 'logback-core', version: "${logbackVersion}"
	
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    compile "org.apache.commons:commons-math3:${commonMath3Version}"

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    compile "com.google.guava:guava:${guavaVersion}"

    // Use JUnit test framework
    testImplementation "junit:junit:4.12"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

startScripts.enabled = false

task routeGuideServer(type: CreateStartScripts) {
    mainClassName = 'io.grpc.examples.routeguide.RouteGuideServer'
    applicationName = 'route-guide-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task routeGuideClient(type: CreateStartScripts) {
    mainClassName = 'io.grpc.examples.routeguide.RouteGuideClient'
    applicationName = 'route-guide-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task helloWorldServer(type: CreateStartScripts) {
    mainClassName = 'io.grpc.examples.helloworld.HelloWorldServer'
    applicationName = 'hello-world-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task helloWorldClient(type: CreateStartScripts) {
    mainClassName = 'io.grpc.examples.helloworld.HelloWorldClient'
    applicationName = 'hello-world-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task hedgingHelloWorldServer(type: CreateStartScripts) {
    mainClassName = 'io.grpc.examples.hedging.HedgingHelloWorldServer'
    applicationName = 'hedging-hello-world-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task hedgingHelloWorldClient(type: CreateStartScripts) {
    mainClassName = 'io.grpc.examples.hedging.HedgingHelloWorldClient'
    applicationName = 'hedging-hello-world-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task compressingHelloWorldClient(type: CreateStartScripts) {
    mainClassName = 'io.grpc.examples.experimental.CompressingHelloWorldClient'
    applicationName = 'compressing-hello-world-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(routeGuideServer)
    from(routeGuideClient)
    from(helloWorldServer)
    from(helloWorldClient)
    from(hedgingHelloWorldClient)
    from(hedgingHelloWorldServer)
    from(compressingHelloWorldClient)
    fileMode = 0755
}