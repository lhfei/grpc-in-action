/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.3/userguide/tutorial_java_projects.html
 */
 
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier
        // gradle versions
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    }
}

version = '0.1.0'

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.google.protobuf'

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
	mavenCentral()
	mavenLocal()    
}


// properties
def grpcVersion = '1.0.3'
def slf4jVersion = '1.7.22'
def logbackVersion = '1.1.9'
dependencies {
    // The production code uses Guava
    compile 'com.google.guava:guava:22.0'
    
    compile group: 'io.grpc', name: 'grpc-protobuf', version: "${grpcVersion}"
	compile group: 'io.grpc', name: 'grpc-netty', version: "${grpcVersion}"
	compile group: 'io.grpc', name: 'grpc-stub', version: "${grpcVersion}"
	
	// Slf4j dependencies
	compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
	compile group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
	compile group: 'org.slf4j', name: 'slf4j-log4j12', version: "${slf4jVersion}"
	
	compile group: 'ch.qos.logback', name: 'logback-classic', version: "${logbackVersion}"
	compile group: 'ch.qos.logback', name: 'logback-core', version: "${logbackVersion}"
	

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}


startScripts.enabled = false


eclipse {
  classpath {
    file {
	  withXml {
		def node = it.asNode()
		node.appendNode('classpathentry', [kind: 'src', path: "build/generated/source/proto/main/grpc"])
		node.appendNode('classpathentry', [kind: 'src', path: "build/generated/source/proto/main/java"])
	  }
    
      //closure executed after .classpath content is loaded from existing file
      //but before gradle build information is merged
      //beforeMerged { classpath ->
		//sourceDirs += file("${projectDir}/build/generated/source/proto/main/java");
        //sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc");
      //}

      //closure executed after .classpath content is loaded from existing file
      //and after gradle build information is merged
      //whenMerged { classpath ->
      	//def rpcSrc = new org.gradle.plugins.ide.eclipse.model.SourceFolder("${projectDir}/build/generated/source/proto/main/grpc", null)
		//def genSrc = new org.gradle.plugins.ide.eclipse.model.SourceFolder("${projectDir}/build/generated/source/proto/main/java", null)
		//classpath.entries.add(rpcSrc)
		//classpath.entries.add(genSrc)
      //}
    }
  }
}

idea {
    module {
        // Not using generatedSourceDirs because of
        // https://discuss.gradle.org/t/support-for-intellij-2016/15294/8
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/java");
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc");
        //generatedSourceDirs += file("${projectDir}/build/generated/source/proto/main/java");
        //generatedSourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc");
    }
}


protobuf {
  protoc {
    // The version of protoc must match protobuf-java. If you don't depend on
    // protobuf-java directly, you will be transitively depending on the
    // protobuf-java version that grpc depends on.
    artifact = 'com.google.protobuf:protoc:3.0.2'
  }
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {
        // To generate deprecated interfaces and static bindService method,
        // turn the enable_deprecated option to true below:
        option 'enable_deprecated=false'
      }
    }
  }
}

task createDocs {
    def docs = file("$buildDir/docs")
    outputs.dir docs
    doLast {
        docs.mkdirs()
        new File(docs, "readme.txt").write("Read me!")
    }
}

task printMessage(type: JavaExec) {
	classpath sourceSets.main.runtimeClasspath
	println 'task printMessage running ...'
	main = 'cn.lhfei.grpc.task.SimpleTask'
	println 'task printMessage done ...'
}

distributions {
    main {
        contents {
            from(createDocs) {
                into "docs"
            }
        }
    }
}

// Hello World!
task helloworldserver(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	main = 'cn.lhfei.grpc.helloworld.HelloWorldServer'
}

task helloworld(dependsOn: helloworldserver, type: JavaExec) {
	classpath sourceSets.main.runtimeClasspath
	main = 'cn.lhfei.grpc.helloworld.HelloWorldClient'
}

task HelloWorldClient(type : CreateStartScripts) {
    mainClassName = 'cn.lhfei.grpc.helloworld.HelloWorldClient'
    applicationName = 'HelloWorld-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task HelloWorldServer(type : CreateStartScripts) {
    mainClassName = 'cn.lhfei.grpc.helloworld.HelloWorldServer'
    applicationName = 'HelloWorld-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into('bin') {
    from(HelloWorldServer)
    from(HelloWorldClient)
    fileMode = 0755
}
